import { NextResponse } from "next/server"
import { neonDB } from "@/lib/neon"

export async function GET() {
  try {
    console.log("üìä Buscando todos os usu√°rios...")

    const usuarios = await neonDB.getAllUsuarios()

    console.log(`‚úÖ ${usuarios.length} usu√°rios encontrados`)

    return NextResponse.json({
      success: true,
      message: `${usuarios.length} usu√°rios encontrados`,
      data: usuarios,
      timestamp: new Date().toISOString(),
    })
  } catch (error) {
    console.error("üí• Erro ao buscar usu√°rios:", error)

    return NextResponse.json(
      {
        success: false,
        message: "Erro ao buscar usu√°rios",
        error: error instanceof Error ? error.message : "Erro desconhecido",
        timestamp: new Date().toISOString(),
      },
      { status: 500 },
    )
  }
}

export async function POST(request: Request) {
  try {
    const body = await request.json()
    const { nome, email, senha, tipo_usuario } = body

    console.log("üë§ Criando novo usu√°rio:", email)

    // Validar dados obrigat√≥rios
    if (!nome || !email || !senha) {
      return NextResponse.json(
        {
          success: false,
          message: "Nome, email e senha s√£o obrigat√≥rios",
        },
        { status: 400 },
      )
    }

    // Verificar se o email j√° existe
    const usuarioExistente = await neonDB.getUsuarioByEmail(email)
    if (usuarioExistente) {
      return NextResponse.json(
        {
          success: false,
          message: "Email j√° est√° em uso",
        },
        { status: 409 },
      )
    }

    // Criar usu√°rio
    const novoUsuario = await neonDB.createUsuario({
      nome,
      email,
      senha,
      tipo_usuario: tipo_usuario || "dj",
      ativo: true,
    })

    console.log("‚úÖ Usu√°rio criado:", novoUsuario.nome)

    // Remover senha da resposta
    const { senha: _, ...usuarioSemSenha } = novoUsuario

    return NextResponse.json({
      success: true,
      message: "Usu√°rio criado com sucesso",
      data: usuarioSemSenha,
      timestamp: new Date().toISOString(),
    })
  } catch (error) {
    console.error("üí• Erro ao criar usu√°rio:", error)

    return NextResponse.json(
      {
        success: false,
        message: "Erro ao criar usu√°rio",
        error: error instanceof Error ? error.message : "Erro desconhecido",
        timestamp: new Date().toISOString(),
      },
      { status: 500 },
    )
  }
}
